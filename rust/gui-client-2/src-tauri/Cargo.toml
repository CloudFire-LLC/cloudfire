[package]
name = "firezone-gui-client-2"
# mark:next-gui-version
version = "1.2.3"
description = "Firezone"
edition = "2021"
default-run = "firezone-gui-client-2"
authors = ["Firezone, Inc."]

[build-dependencies]
anyhow = { version = "1.0" }
tauri-build = { version = "1.5", features = [] }

[dependencies]
anyhow = { version = "1.0" }
arboard = { version = "3.4.0", default-features = false }
atomicwrites = "0.4.3"
chrono = { workspace = true }
clap = { version = "4.5", features = ["derive",  "env"] }
connlib-client-shared = { workspace = true }
connlib-shared = { workspace = true }
crash-handler = "0.6.2"
firezone-bin-shared = { workspace = true }
firezone-headless-client = { path = "../../headless-client" }
firezone-logging = { workspace = true }
floem = { git = "https://github.com/lapce/floem", branch = "main" }
futures = { version = "0.3", default-features = false }
hex = "0.4.3"
minidumper = "0.8.3"
native-dialog = "0.7.0"
output_vt100 = "0.1"
png = "0.17.13" # `png` is free since we already need it for Tauri
rand = "0.8.5"
reqwest = { version = "0.12.5", default-features = false, features = ["stream", "rustls-tls"] }
rustls = { workspace = true }
sadness-generator = "0.5.0"
secrecy = { workspace = true }
semver = { version = "1.0.22", features = ["serde"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
subtle = "2.5.0"
tao = "0.29.1"
thiserror = { version = "1.0", default-features = false }
time = { version = "0.3.36", features = ["formatting"] }
tokio = { workspace = true, features = ["signal", "time", "macros", "rt", "rt-multi-thread"] }
tokio-util = { version = "0.7.11", features = ["codec"] }
tracing = { workspace = true }
tracing-log = "0.2"
tracing-panic = "0.1.2"
tracing-subscriber = { version = "0.3.17", features = ["env-filter"] }
tray-icon = "0.16.0"
url = { version = "2.5.2", features = ["serde"] }
uuid = { version = "1.10.0", features = ["v4"] }
zip = { version = "2", features = ["deflate", "time"], default-features = false }

[dependencies.keyring]
version = "3.2.0"
features = [
    "crypto-rust", # Don't rely on OpenSSL
    "sync-secret-service", # Can't use Tokio because of <https://github.com/hwchen/keyring-rs/issues/132>
    "windows-native", # Yes, really, we must actually explicitly ask for every platform. Otherwise it defaults to an in-memory mock store. Really. That's really how `keyring` 3.x is designed.
]

[target.'cfg(target_os = "linux")'.dependencies]
dirs = "5.0.1"
nix = { version = "0.29.0", features = ["user"] }

[target.'cfg(target_os = "macos")'.dependencies]

[target.'cfg(target_os = "windows")'.dependencies]
tauri-winrt-notification = "0.5.0"
winreg = "0.52.0"
wintun = "0.4.0"

[target.'cfg(target_os = "windows")'.dependencies.windows]
version = "0.57.0"
features = [
  "Win32_Foundation",
  "Win32_System_Threading",
]

[features]
# Needed to soak up something unused in Tauri's build system
custom-protocol = []

[lints]
workspace = true
