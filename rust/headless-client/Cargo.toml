[package]
name = "firezone-headless-client"
# mark:automatic-version
version = "1.0.5"
edition = "2021"
authors = ["Firezone, Inc."]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
anyhow = { version = "1.0" }
clap = { version = "4.5", features = ["derive",  "env"] }
connlib-client-shared = { workspace = true }
connlib-shared = { workspace = true }
firezone-cli-utils = { workspace = true }
futures = "0.3.30"
git-version = "0.3.9"
humantime = "2.1"
secrecy = { workspace = true }
serde = { version = "1.0.197", features = ["derive"] }
serde_json = "1.0.115"
# This actually relies on many other features in Tokio, so this will probably
# fail to build outside the workspace. <https://github.com/firezone/firezone/pull/4328#discussion_r1540342142>
tokio = { version = "1.36.0", features = ["macros", "signal"] }
tokio-util = { version = "0.7.11", features = ["codec"] }
tracing = { workspace = true }
tracing-subscriber = { version = "0.3.17", features = ["env-filter"] }
url = { version = "2.3.1", default-features = false }

[target.'cfg(target_os = "linux")'.dependencies]
dirs = "5.0.1"
nix = { version =  "0.28.0", features = ["fs", "user"] }
resolv-conf = "0.7.0"
sd-notify = "0.4.1" # This is a pure Rust re-implementation, so it isn't vulnerable to CVE-2024-3094

[target.'cfg(target_os = "macos")'.dependencies]
dirs = "5.0.1"

[target.'cfg(target_os = "windows")'.dependencies]
ipconfig = "0.3.2"
known-folders = "1.1.0"
ring = "0.17"
thiserror = { version = "1.0", default-features = false }
tracing-subscriber = { version = "0.3.17", features = ["env-filter"] }
windows-service = "0.7.0"

[target.'cfg(target_os = "windows")'.dependencies.windows]
version = "0.56.0"
features = [
    # For named pipe IPC
    "Win32_Security",
    # For named pipe IPC
    "Win32_System_SystemServices",
]

[lints]
workspace = true
