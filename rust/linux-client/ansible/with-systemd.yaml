---

# Should be roughly equivalent to `dns-systemd-resolved.sh`, but runs locally on a VM
# without relying on docker-compose, or the httpbin container, etc.

- hosts: myhosts
  tasks:
  # If we don't enable DHCP on the VM's Ethernet, systemd never figures out
  # that it needs DHCP. Note that `enp0s3` will be a different name on every system.
  - name: Copy network configuration (Ethernet)
    become: yes
    ansible.builtin.copy:
       src: enp0s3.network
       dest: /etc/systemd/network/enp0s3.network
  - name: Update apt-get repo and cache
    become: yes
    ansible.builtin.apt:
       update_cache: yes
       cache_valid_time: 3600
  - name: Install apt packages
    become: yes
    ansible.builtin.apt:
       name: systemd-resolved
       state: latest
  # TODO: Can this be eliminated? Or is it needed for DHCP on enp0s3?
  - name: Enable systemd-networkd
    become: yes
    ansible.builtin.systemd:
       name: systemd-networkd
       state: started
       enabled: true
    # Need to restart resolved otherwise `resolvectl` will hang. idk why
  - name: Restart systemd-resolved
    become: yes
    ansible.builtin.systemd:
       name: systemd-resolved
       state: restarted
       enabled: true
  - name: Copy Firezone client
    become: yes
    ansible.builtin.copy:
       src: ../../target/release/firezone-linux-client
       dest: /usr/bin/firezone-linux-client
       mode: '0755'
  - name: Setcap on Firezone
    become: yes
    community.general.capabilities:
       path: /usr/bin/firezone-linux-client
       capability: cap_net_admin+eip
       state: present
  - name: Copy systemd service unit
    become: yes
    ansible.builtin.copy:
       src: ../../../scripts/firezone-client.service
       dest: /etc/systemd/system/firezone-client.service
       mode: '0644'
  - name: Copy Firezone token
    ansible.builtin.copy:
       src: firezone-token
       dest: firezone-token
  - name: Copy test script
    ansible.builtin.copy:
       src: test.sh
       dest: test.sh
       mode: '0755'
