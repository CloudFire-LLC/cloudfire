name: Publish
on:
  release:
    types:
      - published
  # We temporary allow to run deployments to production without publishing a release
  # to make sure that the deployment works as expected
  workflow_dispatch:

env:
  # mark:automatic-version
  VERSION: "1.20231001.0"

jobs:
  push-prod:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
    permissions:
      # Needed to upload artifacts to a release
      packages: write
      # Needed to login to GCP
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to staging registry
        uses: ./.github/actions/gcp-docker-login
        id: login-staging
        with:
          project: firezone-staging
      - name: Login to production registry
        uses: ./.github/actions/gcp-docker-login
        id: login-production
        with:
          project: firezone-prod
      - name: Pull and push images
        run: |
          set -xe
          IMAGES=(relay api gateway web)

          MAJOR_VERSION="${VERSION%%.*}"
          MAJOR_MINOR_VERSION="${VERSION%.*}"

          for image in "${IMAGES[@]}"; do
            SOURCE_TAG=${{ steps.login-staging.outputs.registry }}/firezone/${image}:47f55da03921c55d268e6c212505550bb68c2e26
            docker pull ${SOURCE_TAG}

            echo "Retagging ${image} from ${SOURCE_TAG}"

            docker tag ${SOURCE_TAG} ${{ steps.login-production.outputs.registry }}/firezone/${image}:47f55da03921c55d268e6c212505550bb68c2e26
            docker tag ${SOURCE_TAG} ${{ steps.login-production.outputs.registry }}/firezone/${image}:${{ env.VERSION }}
            docker tag ${SOURCE_TAG} ${{ steps.login-production.outputs.registry }}/firezone/${image}:${{ env.VERSION }}-47f55da03921c55d268e6c212505550bb68c2e26
            docker tag ${SOURCE_TAG} ${{ steps.login-production.outputs.registry }}/firezone/${image}:${MAJOR_VERSION}
            docker tag ${SOURCE_TAG} ${{ steps.login-production.outputs.registry }}/firezone/${image}:${MAJOR_MINOR_VERSION}

            docker push --all-tags ${{ steps.login-production.outputs.registry }}/firezone/${image}
          done

  deploy-prod:
    needs: push-prod
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    env:
      TF_CLOUD_ORGANIZATION: "firezone"
      TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
      TF_WORKSPACE: "production"
    steps:
      - name: Get Terraform Version
        run: |
          TERRAFORM_VERSION=$(cat .tool-versions | grep terraform | awk '{ print $NF; }')
          echo "TERRAFORM_VERSION=${TERRAFORM_VERSION}" >> $GITHUB_ENV
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.4
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          # Subdirectory is set in the project settings:
          # https://app.terraform.io/app/firezone/workspaces/production/settings/general
          directory: "./"
      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.4
        id: apply-run
        env:
          TF_VAR_api_image_tag: '"${{ env.VERSION }}-47f55da03921c55d268e6c212505550bb68c2e26"'
          TF_VAR_web_image_tag: '"${{ env.VERSION }}-47f55da03921c55d268e6c212505550bb68c2e26"'
          TF_VAR_relay_image_tag: '"${{ env.VERSION }}-47f55da03921c55d268e6c212505550bb68c2e26"'
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version:
            ${{ steps.apply-upload.outputs.configuration_version_id }}
      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.4
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI 47f55da03921c55d268e6c212505550bb68c2e26"

  publish-release-images:
    needs: deploy-prod
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
    permissions:
      # Needed to upload artifacts to a release
      packages: write
      # Needed to login to GCP
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/gcp-docker-login
        id: login
        with:
          project: firezone-staging
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Pull and push
        run: |
          set -xe
          IMAGES=(relay api gateway web)

          MAJOR_VERSION="${VERSION%%.*}"
          MAJOR_MINOR_VERSION="${VERSION%.*}"

          for image in "${IMAGES[@]}"; do
            SOURCE_TAG=${{ steps.login.outputs.registry }}/firezone/${image}:47f55da03921c55d268e6c212505550bb68c2e26
            docker pull ${SOURCE_TAG}

            echo "Retagging ${image} from ${SOURCE_TAG}"

            docker tag ${SOURCE_TAG} ghcr.io/firezone/${image}:47f55da03921c55d268e6c212505550bb68c2e26
            docker tag ${SOURCE_TAG} ghcr.io/firezone/${image}:${{ env.VERSION }}
            docker tag ${SOURCE_TAG} ghcr.io/firezone/${image}:latest
            docker tag ${SOURCE_TAG} ghcr.io/firezone/${image}:${MAJOR_VERSION}
            docker tag ${SOURCE_TAG} ghcr.io/firezone/${image}:${MAJOR_MINOR_VERSION}

            docker push --all-tags ghcr.io/firezone/${image}
          done
