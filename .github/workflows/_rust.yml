---
name: Rust
"on":
  workflow_call:

defaults:
  run:
    working-directory: ./rust

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  static-analysis:
    name: static-analysis-${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: https://github.com/rust-lang/cargo/issues/5220
        include:
          - runs-on: ubuntu-22.04
            packages: linux-rust-packages.sh
          - runs-on: macos-14
            packages: macos-rust-packages.sh
          - runs-on: windows-2022
            packages: windows-rust-packages.sh
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
      - uses: ./.github/actions/setup-tauri
      - run: cargo fmt -- --check
      - run: |
          source ../scripts/tests/${{ matrix.packages }}
          cargo doc --all-features --no-deps --document-private-items ${FIREZONE_PACKAGES[@]}
        env:
          RUSTDOCFLAGS: "-D warnings"
        shell: bash
      - run: |
          source ../scripts/tests/${{ matrix.packages }}
          cargo clippy --all-targets --all-features ${FIREZONE_PACKAGES[@]} -- -D warnings
        shell: bash

  test:
    name: test-${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: https://github.com/rust-lang/cargo/issues/5220
        include:
          - runs-on: ubuntu-20.04
            packages: linux-rust-packages.sh
          - runs-on: ubuntu-22.04
            packages: linux-rust-packages.sh
          - runs-on: macos-12
            packages: macos-rust-packages.sh
          - runs-on: macos-13
            packages: macos-rust-packages.sh
          - runs-on: macos-14
            packages: macos-rust-packages.sh
          - runs-on: windows-2019
            packages: windows-rust-packages.sh
          - runs-on: windows-2022
            packages: windows-rust-packages.sh
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
      - uses: ./.github/actions/setup-tauri
      - run: |
          source ../scripts/tests/${{ matrix.packages }}
          cargo test --all-features ${FIREZONE_PACKAGES[@]} -- --include-ignored
        env:
          # <https://github.com/rust-lang/cargo/issues/5999>
          # Needed to create tunnel interfaces in unit tests
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: "sudo --preserve-env"
          RUST_BACKTRACE: full
        shell: bash

  # Runs the Windows client smoke test, built in debug mode. We can't run it in release
  # mode because of a known issue: <https://github.com/firezone/firezone/blob/456e044f882c2bb314e19cc44c0d19c5ad817b7c/rust/windows-client/src-tauri/src/client.rs#L162-L164>
  gui-smoke-test:
    name: gui-smoke-test-${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-20.04
          # Broken on 22.04 <https://github.com/firezone/firezone/issues/3699>
          - runs-on: ubuntu-22.04
          - runs-on: windows-2019
          - runs-on: windows-2022
    runs-on: ${{ matrix.runs-on }}
    defaults:
      run:
        # Must be in this dir for `pnpm` to work
        working-directory: ./rust/gui-client
    env:
      CONNLIB_LOG_UPLOAD_INTERVAL_SECS: 300
      # The Windows client ignores RUST_LOG because it uses a settings file instead
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/setup-rust
        with:
          cache_backend: 'github'
      - uses: ./.github/actions/setup-tauri
      - name: pnpm install
        run: |
          pnpm install
          cp "node_modules/flowbite/dist/flowbite.min.js" "src/"
      - name: Compile TypeScript
        run: pnpm tsc
      - name: Compile Tailwind
        run: pnpm tailwindcss -i src/input.css -o src/output.css
      - name: Build client
        run: cargo build -p firezone-gui-client
      - name: Run smoke tests (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: bash ../../scripts/tests/smoke-test-gui-linux.sh
      - name: Run smoke tests (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: bash ../../scripts/tests/smoke-test-gui-windows.sh
