name: Rust
on:
  workflow_call:

defaults:
  run:
    working-directory: ./rust

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  static-analysis:
    name: static-analysis-${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          # We only need to run static analysis checks per OS family
          - ubuntu-22.04
          - macos-14
          - windows-2022
        # TODO: https://github.com/rust-lang/cargo/issues/5220
        include:
          - runs-on: ubuntu-22.04
            packages: # Intentionally blank as a package catch-all linter
            target_os: linux
          - runs-on: macos-14
            packages: -p connlib-client-apple -p snownet
            target_os: macos
          - runs-on: windows-2022
            packages: -p connlib-client-shared -p firezone-windows-client -p snownet
            target_os: windows
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
      - uses: ./.github/actions/setup-tauri
        with:
          target_os: ${{ matrix.target_os }}
      - run: cargo fmt -- --check
      - run: |
          cargo doc --all-features --no-deps --document-private-items ${{ matrix.packages }}
        env:
          RUSTDOCFLAGS: "-D warnings"
      - run: |
          cargo clippy --all-targets --all-features ${{ matrix.packages }} -- -D warnings

  test:
    name: test-${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: https://github.com/rust-lang/cargo/issues/5220
        include:
          - runs-on: ubuntu-20.04
            packages: -p firezone-linux-client -p firezone-windows-client -p firezone-gateway -p connlib-client-android -p snownet
            target_os: linux
          - runs-on: ubuntu-22.04
            packages: -p firezone-linux-client -p firezone-windows-client -p firezone-gateway -p connlib-client-android -p snownet
            target_os: linux
          - runs-on: macos-12
            packages: -p connlib-client-apple -p snownet
            target_os: macos
          - runs-on: macos-13
            packages: -p connlib-client-apple -p snownet
            target_os: macos
          - runs-on: macos-14
            packages: -p connlib-client-apple -p snownet
            target_os: macos
          - runs-on: windows-2019
            packages: -p firezone-windows-client -p connlib-client-shared -p snownet
            target_os: windows
          - runs-on: windows-2022
            packages: -p firezone-windows-client -p connlib-client-shared -p snownet
            target_os: windows
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
      - uses: ./.github/actions/setup-tauri
        with:
          target_os: ${{ matrix.target_os }}
      - run: cargo test --all-features ${{ matrix.packages }}

  # Runs the Windows client smoke test, built in debug mode. We can't run it in release
  # mode because of a known issue: <https://github.com/firezone/firezone/blob/456e044f882c2bb314e19cc44c0d19c5ad817b7c/rust/windows-client/src-tauri/src/client.rs#L162-L164>
  windows-smoke-test:
    name: windows-smoke-test-${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            target_os: linux
          - runs-on: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            target_os: linux
          - runs-on: windows-2019
            target: x86_64-pc-windows-msvc
            target_os: windows
          - runs-on: windows-2022
            target: x86_64-pc-windows-msvc
            target_os: windows
    runs-on: ${{ matrix.runs-on }}
    defaults:
      run:
        working-directory: ./rust/windows-client
    env:
      CONNLIB_LOG_UPLOAD_INTERVAL_SECS: 300
      # The Windows client ignores RUST_LOG because it uses a settings file instead
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-node
        with:
          node-version: '20'
      - uses: ./.github/actions/setup-rust
        with:
          targets: ${{ matrix.target }}
      - uses: ./.github/actions/setup-tauri
        with:
          target_os: ${{ matrix.target_os }}
      - name: pnpm install
        run: |
          pnpm install
          cp "node_modules/flowbite/dist/flowbite.min.js" "src/"
      - name: Compile TypeScript
        run: pnpm tsc
      - name: Compile Tailwind
        run: pnpm tailwindcss -i src/input.css -o src/output.css
      - name: Build client
        run: cargo build -p firezone-windows-client
      - name: Run smoke tests
        if: ${{ matrix.target_os == 'linux' }}
        run: bash ../../scripts/tests/smoke-test-gui-linux.sh
      - name: Run smoke tests
        if: ${{ matrix.target_os == 'windows' }}
        run: bash ../../scripts/tests/smoke-test-gui-windows.sh

  # This should be identical to `build-push-windows-release-artifacts` in `cd.yml` except for the Github permissions, needs tag, and uploading step
  build-tauri:
    name: build-tauri-${{ matrix.name }}-${{ matrix.runs-on }}
    runs-on: ${{ matrix.runs-on }}
    defaults:
      run:
        working-directory: ./rust/windows-client
    strategy:
      fail-fast: false
      # The matrix is 1x1 to match the style of build-push-linux-release-artifacts
      # In the future we could try to cross-compile aarch64-windows here.
      matrix:
        include:
          - package: firezone-windows-client
            artifact: firezone-windows-client
            name: windows-client
          - runs-on: ubuntu-20.04
            rename-script: scripts/build/build-tauri-ubuntu.sh
            target: x86_64-unknown-linux-gnu
            target_os: linux
          - runs-on: windows-2019
            rename-script: scripts/build/build-tauri-windows.sh
            target: x86_64-pc-windows-msvc
            target_os: windows

    env:
      BINARY_DEST_PATH: ${{ matrix.artifact }}
      CONNLIB_LOG_UPLOAD_INTERVAL_SECS: 300
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-node
        with:
          node-version: '20'
      - uses: ./.github/actions/setup-rust
        with:
          targets: ${{ matrix.target }}
      - uses: ./.github/actions/setup-tauri
        with:
          target_os: ${{ matrix.target_os }}
      - name: Install pnpm deps
        run: pnpm install
      - name: Build release exe and MSI
        run: pnpm build
      - name: Compute SHA256 and rename
        env:
          BINARY_DEST_PATH: ${{ env.BINARY_DEST_PATH }}
        run: ${{ matrix.rename-script }}
      - name: Save GUI client
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}-x64
          path: |
            ${{ github.workspace }}/rust/windows-client/${{ matrix.artifact }}-x64.exe
            ${{ github.workspace }}/rust/windows-client/${{ matrix.artifact }}-x64.exe.sha256sum.txt
      - name: Save GUI installer
        if: ${{ matrix.is_windows }} == true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}-x64-msi
          path: |
            ${{ github.workspace }}/rust/windows-client/${{ matrix.artifact }}-x64.msi
            ${{ github.workspace }}/rust/windows-client/${{ matrix.artifact }}-x64.msi.sha256sum.txt
      - name: Save GUI debug symbols
        if: ${{ matrix.is_windows }} == true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}-x64-pdb
          path: |
            ${{ github.workspace }}/rust/windows-client/${{ matrix.artifact }}-x64.pdb
            ${{ github.workspace }}/rust/windows-client/${{ matrix.artifact }}-x64.pdb.sha256sum.txt
