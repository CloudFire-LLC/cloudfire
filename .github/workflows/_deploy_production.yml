name: Deploy Production
run-name: Triggered by ${{ github.actor }}
on:
  workflow_call:
    inputs:
      tag:
        description: "Image tag to deploy. Defaults to the last commit SHA in the branch."
        type: string
        default: ${{ github.sha }}
        required: false

concurrency:
  group: "production-deploy"
  cancel-in-progress: false

jobs:
  sanity-check:
    runs-on: ubuntu-22.04
    steps:
      - name: Ensure CI passed for the given sha
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "repos/firezone/firezone/actions/runs?head_sha=${{ inputs.tag }}&status=success" \
            | jq -e '.workflow_runs | length > 0' || exit 1

  push:
    needs: sanity-check
    runs-on: ubuntu-22.04
    permissions:
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image: [domain, api, web, gateway, relay, client]
    steps:
      - uses: actions/checkout@v4
      - name: Login to staging registry
        uses: ./.github/actions/gcp-docker-login
        id: login-staging
        with:
          project: firezone-staging
      - name: Login to production registry
        uses: ./.github/actions/gcp-docker-login
        id: login-production
        with:
          project: firezone-prod
      - name: Pull and push images
        run: |
          set -xe

          SOURCE_TAG=${{ steps.login-staging.outputs.registry }}/firezone/${{ matrix.image }}:${{ inputs.tag }}

          docker buildx imagetools create \
            -t ${{ steps.login-production.outputs.registry }}/firezone/${{ matrix.image }}:${{ inputs.tag }} \
            $SOURCE_TAG

  deploy-production:
    needs: push
    runs-on: ubuntu-22.04
    environment: gcp_production
    permissions:
      contents: write
    env:
      TF_CLOUD_ORGANIZATION: "firezone"
      TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
      TF_WORKSPACE: "production"
    steps:
      - uses: actions/checkout@v4
      - name: Tool Versions
        id: versions
        uses: marocchino/tool-versions-action@v1.2.0
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.versions.outputs.terraform }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          # Subdirectory is set in the project settings:
          # https://app.terraform.io/app/firezone/workspaces/production/settings/general
          directory: "./"
      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.0
        id: apply-run
        env:
          TF_VAR_image_tag:
            '"${{ inputs.tag }}"'
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version:
            ${{ steps.apply-upload.outputs.configuration_version_id }}
      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment:
            "Apply Run from GitHub Actions CI ${{ inputs.tag }}"

  update-vercel:
    needs: deploy-production
    runs-on: ubuntu-22.04
    env:
      VERCEL_PROJECT: firezone
      VERCEL_SLUG: firezone
      # Fetched from Vercel's API. Not a secret.
      VERCEL_ENV_VAR_ID: Ph436pR2So7nwrSI
    steps:
      - name: Update FIREZONE_DEPLOYED_SHA
        run: |
          curl -X PATCH "https://api.vercel.com/v9/projects/${VERCEL_PROJECT}/env/${ENV_VAR_ID}?slug=${VERCEL_SLUG}" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" -H "Content-Type: application/json" \
            -d '{
              "comment": "latest deployed SHA for control plane",
              "key": "FIREZONE_DEPLOYED_SHA",
              "type": "plain",
              "value": "${{ inputs.tag }}"
            }'
