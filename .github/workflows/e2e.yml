# This workflow file contains end-to-end tests for running client apps on
# our baremetal testbed. Artifacts are intentionally built in debug mode
# so that debug assert and other test-related macros can be triggered.
#
# This workflow does not replace the need to sanity check the QA builds manually,
# but should reduce (and some day) eliminate the need for a full manual QA runbook.
name: End to end tests
on:
  # TODO
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
  pull_request:

concurrency:
  group: "e2e-${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on:
          - macos-14-firezone
          - windows-11-firezone
          - ubuntu-22.04-firezone
    defaults:
      run:
        working-directory: ./e2e
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: './e2e/pnpm-lock.yaml'
      - run: pnpm i

  docker:
    needs: setup
    runs-on: ubuntu-22.04-firezone
    env:
      # mark:automatic-version
      VERSION: "1.0.0"
    steps:
      - uses: actions/checkout@v4
      - run: docker compose up -d postgres
      - run: docker compose run elixir /bin/sh -c 'cd apps/domain && mix do ecto.create, ecto.migrate, ecto.seed'
      - name: Build images
        run: |
          docker compose build
      - name: Start docker compose in the background
        run: |
          docker compose up -d \
            api \
            web \
            client \
            relay \
            gateway \
            iperf3
      - name: Wait for client to ping resource
        run: |
          docker compose exec -it client timeout 60 \
          sh -c 'until ping -W 1 -c 1 172.20.0.100 &>/dev/null; do true; done'

  macos:
    needs: docker
    runs-on: macos-14-firezone
    permissions:
      contents: read
      id-token: 'write'
    defaults:
      run:
        working-directory: ./swift/apple
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
        with:
          targets: aarch64-apple-darwin aarch64-apple-ios
      - name: build macos app
        run: |
          # Copy xcconfig
          cp Firezone/xcconfig/debug.xcconfig Firezone/xcconfig/config.xcconfig

          # Always clean build folder to prevent other builds from affecting this one
          xcodebuild clean -alltargets

          # Build app bundle
          xcodebuild build \
            -allowProvisioningUpdates \
            -configuration Debug \
            -scheme Firezone \
            -sdk macosx \
            -destination 'platform=macOS'

  windows:
    needs: docker
    runs-on: windows-11-firezone
    permissions:
      contents: read
      id-token: 'write'
    defaults:
      run:
        working-directory: ./rust
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
        with:
          targets: x86_64-pc-windows-msvc
      - name: Build release binaries
        run: |
          pnpm add -g @tauri-apps/cli
          pnpm tauri build

          # Used for release artifact
          # In release mode the name comes from tauri.conf.json
          cp "target/release/Firezone Windows Client.exe" "windows-client-x64.exe"

  linux:
    needs: docker
    runs-on: ubuntu-22.04-firezone
    permissions:
      contents: read
      id-token: 'write'
    defaults:
      run:
        working-directory: ./rust
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
        with:
          targets: x86_64-unknown-linux-musl
      - run: |
          cargo build --package firezone-linux-client
          ./target/debug/firezone-linux-client

  android:
    needs: docker
    runs-on: ubuntu-22.04-firezone
    permissions:
      contents: read
      id-token: 'write'
    defaults:
      run:
        working-directory: ./kotlin/android
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
        with:
          targets: armv7-linux-androideabi aarch64-linux-android x86_64-linux-android i686-linux-android
      - uses: actions/setup-java@v4
        with:
          distribution: oracle
          java-version: 17
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: ./kotlin/android
      - run: |
          echo 'sdk.dir=/home/firezone/Android/Sdk' > local.properties

          # Needed on Ubuntu 22.04
          if ! type python > /dev/null; then
            echo "'python' not found, aliasing python3"
            alias python="python3"
          fi

          ./gradlew --info assembleDebug bundleDebug

  ios:
    strategy:
      matrix:
        destination:
          - "Jamil's iPhone"
          - "Jamil's iPad"
    needs: docker
    runs-on: macos-14-firezone
    permissions:
      contents: read
      id-token: 'write'
    defaults:
      run:
        working-directory: ./swift/apple
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
        with:
          targets: aarch64-apple-darwin aarch64-apple-ios
      - name: build ios app
        run: |
          # Copy xcconfig
          cp Firezone/xcconfig/debug.xcconfig Firezone/xcconfig/config.xcconfig

          # Always clean build folder to prevent other builds from affecting this one
          xcodebuild clean -alltargets

          # Build archive
          xcodebuild archive \
            -allowProvisioningUpdates \
            -archivePath $RUNNER_TEMP/Firezone.xcarchive \
            -configuration Debug \
            -scheme Firezone \
            -sdk iphoneos \
            -destination "platform=iOS,name=${{ matrix.destination }}"

  teardown:
    needs:
      - macos
      - windows
      - linux
      - android
      - ios
    if: 'always()'
    runs-on: ubuntu-22.04-firezone
    steps:
      - uses: actions/checkout@v4
      - run: docker compose logs postgres
      - run: docker compose logs vault
      - run: docker compose logs web
      - run: docker compose logs client
      - run: docker compose logs gateway
      - run: docker compose logs relay
      - run: docker compose logs elixir
      - run: docker compose logs api
      - run: |
          docker compose down -v

          # TODO: Granularly prune to preserve build cache
          # docker system prune --force --all --volumes
