name: Integration Tests
on:
  merge_group:
    types: [checks_requested]
  pull_request:
  workflow_dispatch:

jobs:
  integration-test_basic-flow:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Read cache on PRs, write cache on main. Keeps our cache smaller and more stable.
      - name: Build and cache images
        uses: docker/bake-action@v4.0.0
        with:
          set: |
            elixir.cache-from=type=gha,scope=elixir
            api.cache-from=type=gha,scope=elixir
            web.cache-from=type=gha,scope=elixir
            client.cache-from=type=gha,scope=rust
            gateway.cache-from=type=gha,scope=rust
            relay.cache-from=type=gha,scope=rust
            ${{ github.ref == 'refs/heads/main' && '
              elixir.cache-to=type=gha,mode=max,scope=elixir
              api.cache-to=type=gha,mode=max,scope=elixir
              web.cache-to=type=gha,mode=max,scope=elixir
              client.cache-to=type=gha,mode=max,scope=rust
              gateway.cache-to=type=gha,mode=max,scope=rust
              relay.cache-to=type=gha,mode=max,scope=rust
            ' || ''}}
          files: docker-compose.yml
          push: false
      - name: Seed database
        run: docker compose run elixir /bin/sh -c "cd apps/domain && mix ecto.seed"
      - name: Start docker compose in the background
        run: docker compose up -d
      - name: Test that client can ping resource
        run: docker compose exec -it client timeout 60 bash -c 'until ping -W 1 -c 1 172.20.0.100 &>/dev/null; do true; done'
      - name: Show Client logs
        if: '!cancelled()'
        run: docker compose logs client
      - name: Show Relay logs
        if: '!cancelled()'
        run: docker compose logs relay
      - name: Show Gateway logs
        if: '!cancelled()'
        run: docker compose logs gateway
      - name: Show API logs
        if: '!cancelled()'
        run: docker compose logs api
      - name: Show httpbin logs
        if: '!cancelled()'
        run: docker compose logs httpbin


  integration-test_relayed-flow:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Read cache on PRs, write cache on main. Keeps our cache smaller and more stable.
      - name: Build and cache images
        uses: docker/bake-action@v4.0.0
        with:
          set: |
            elixir.cache-from=type=gha,scope=elixir
            api.cache-from=type=gha,scope=elixir
            web.cache-from=type=gha,scope=elixir
            client.cache-from=type=gha,scope=rust
            gateway.cache-from=type=gha,scope=rust
            relay.cache-from=type=gha,scope=rust
            ${{ github.ref == 'refs/heads/main' && '
              elixir.cache-to=type=gha,mode=max,scope=elixir
              api.cache-to=type=gha,mode=max,scope=elixir
              web.cache-to=type=gha,mode=max,scope=elixir
              client.cache-to=type=gha,mode=max,scope=rust
              gateway.cache-to=type=gha,mode=max,scope=rust
              relay.cache-to=type=gha,mode=max,scope=rust
            ' || ''}}
          files: docker-compose.yml
          push: false
      - name: Seed database
        run: docker compose run elixir /bin/sh -c "cd apps/domain && mix ecto.seed"
      - name: Start docker compose in the background
        run: docker compose up -d
      # This rule forces to use the relay between client and gateway.
      #
      - name: Disallow traffic between gateway and client container
        run: |
          sudo iptables -I FORWARD 1 -s  172.28.0.100 -d 172.28.0.105 -j DROP
          sudo iptables -I FORWARD 1 -s  172.28.0.105 -d 172.28.0.100 -j DROP
      - name: Test that client can ping resource
        run: docker compose exec -it client timeout 60 bash -c 'until ping -W 1 -c 1 172.20.0.100 &>/dev/null; do true; done'
      - name: Show Client logs
        if: '!cancelled()'
        run: docker compose logs client
      - name: Show Relay logs
        if: '!cancelled()'
        run: docker compose logs relay
      - name: Show Gateway logs
        if: '!cancelled()'
        run: docker compose logs gateway
      - name: Show API logs
        if: '!cancelled()'
        run: docker compose logs api
      - name: Show httpbin logs
        if: '!cancelled()'
        run: docker compose logs httpbin
