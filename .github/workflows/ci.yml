#r
name: Continuous Integration
on:
  pull_request:
  merge_group:
    types: [checks_requested]
  workflow_dispatch:

jobs:
  elixir:
    uses: ./.github/workflows/elixir.yml
  rust:
    uses: ./.github/workflows/rust.yml
  kotlin:
    uses: ./.github/workflows/kotlin.yml
  swift:
    uses: ./.github/workflows/swift.yml
  static-analysis:
    uses: ./.github/workflows/static-analysis.yml
  terraform:
    uses: ./.github/workflows/terraform.yml
    secrets: inherit

  build-containers:
    needs:
      - elixir
      - rust
      - static-analysis
    permissions:
      contents: read
      id-token: "write"
    runs-on: ubuntu-latest
    env:
      APPLICATION_NAME: web
      REGISTRY: us-east1-docker.pkg.dev
      GCLOUD_PROJECT: firezone-staging
      GOOGLE_CLOUD_PROJECT: firezone-staging
      CLOUDSDK_PROJECT: firezone-staging
      CLOUDSDK_CORE_PROJECT: firezone-staging
      GCP_PROJECT: firezone-staging
    steps:
      - uses: actions/checkout@v4
      - id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/397012414171/locations/global/workloadIdentityPools/github-actions/providers/github-actions"
          service_account: "github-actions@github-iam-387915.iam.gserviceaccount.com"
          export_environment_variables: true
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
      - name: Change current gcloud account
        run: gcloud --quiet config set project ${GCLOUD_PROJECT}
      - name: Login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Build Branch Name
        id: vsn
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          BRANCH_NAME=$(echo ${BRANCH_NAME} | sed 's/\//_/g'  | sed 's/\:/_/g')
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
      - name: "Run Cloud Build"
        run: |
          gcloud builds submit \
            --config cloudbuild.yaml \
            --substitutions='_REPOSITORY=firezone,_REGISTRY=${REGISTRY},_BRANCH_NAME=${{ env.BRANCH_NAME }},_API_TAG=${{ github.sha }},_WEB_TAG=${{ github.sha }},_RELAY_TAG=${{ github.sha }},_GATEWAY_TAG=${{ github.sha }}' \
            --project "firezone-staging" \
            --timeout "30m"

  integration-test_basic-flow:
    needs:
      - build-containers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # TODO: reuse build containers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build images
        uses: docker/bake-action@v4.0.0
        with:
          set: |
            elixir.cache-from=scope=elixir,type=gha
            elixir.cache-to=scope=elixir,type=gha,mode=max
            api.cache-from=scope=api,type=gha
            api.cache-to=scope=api,type=gha,mode=max
            web.cache-from=scope=web,type=gha
            web.cache-to=scope=web,type=gha,mode=max
            client.cache-from=scope=rust,type=gha
            client.cache-to=scope=rust,type=gha,mode=max
            gateway.cache-from=scope=rust,type=gha
            gateway.cache-to=scope=rust,type=gha,mode=max
            relay.cache-from=scope=rust,type=gha
            relay.cache-to=scope=rust,type=gha,mode=max
          files: docker-compose.yml
          push: false
      - name: Seed database
        run:
          docker compose run elixir /bin/sh -c "cd apps/domain && mix ecto.seed"
      - name: Start docker compose in the background
        run: docker compose up -d
      - name: Test that client can ping resource
        run:
          docker compose exec -it client timeout 60 bash -c 'until ping -W 1 -c
          1 172.20.0.100 &>/dev/null; do true; done'
      - name: Show Client logs
        if: "!cancelled()"
        run: docker compose logs client
      - name: Show Relay logs
        if: "!cancelled()"
        run: docker compose logs relay
      - name: Show Gateway logs
        if: "!cancelled()"
        run: docker compose logs gateway
      - name: Show API logs
        if: "!cancelled()"
        run: docker compose logs api
      - name: Show httpbin logs
        if: "!cancelled()"
        run: docker compose logs httpbin

  integration-test_relayed-flow:
    needs:
      - build-containers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build images
        uses: docker/bake-action@v4.0.0
        with:
          set: |
            elixir.cache-from=scope=elixir,type=gha
            elixir.cache-to=scope=elixir,type=gha,mode=max
            api.cache-from=scope=api,type=gha
            api.cache-to=scope=api,type=gha,mode=max
            web.cache-from=scope=web,type=gha
            web.cache-to=scope=web,type=gha,mode=max
            client.cache-from=scope=rust,type=gha
            client.cache-to=scope=rust,type=gha,mode=max
            gateway.cache-from=scope=rust,type=gha
            gateway.cache-to=scope=rust,type=gha,mode=max
            relay.cache-from=scope=rust,type=gha
            relay.cache-to=scope=rust,type=gha,mode=max
          files: docker-compose.yml
          push: false
      - name: Seed database
        run:
          docker compose run elixir /bin/sh -c "cd apps/domain && mix ecto.seed"
      - name: Start docker compose in the background
        run: docker compose up -d
      # This rule forces to use the relay between client and gateway.
      #
      - name: Disallow traffic between gateway and client container
        run: |
          sudo iptables -I FORWARD 1 -s  172.28.0.100 -d 172.28.0.105 -j DROP
          sudo iptables -I FORWARD 1 -s  172.28.0.105 -d 172.28.0.100 -j DROP
      - name: Test that client can ping resource
        run:
          docker compose exec -it client timeout 60 bash -c 'until ping -W 1 -c
          1 172.20.0.100 &>/dev/null; do true; done'
      - name: Show Client logs
        if: "!cancelled()"
        run: docker compose logs client
      - name: Show Relay logs
        if: "!cancelled()"
        run: docker compose logs relay
      - name: Show Gateway logs
        if: "!cancelled()"
        run: docker compose logs gateway
      - name: Show API logs
        if: "!cancelled()"
        run: docker compose logs api
      - name: Show httpbin logs
        if: "!cancelled()"
        run: docker compose logs httpbin
