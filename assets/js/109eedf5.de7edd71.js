"use strict";(self.webpackChunknew_docs=self.webpackChunknew_docs||[]).push([[4291],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),p=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(l.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return t?n.createElement(f,a(a({ref:r},c),{},{components:t})):n.createElement(f,a({ref:r},c))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7100:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=t(7462),o=(t(7294),t(3905));const i={title:"Traefik",sidebar_position:2},a=void 0,s={unversionedId:"deploy/reverse-proxies/traefik",id:"deploy/reverse-proxies/traefik",title:"Traefik",description:"The following are examples for configuring the Traefik",source:"@site/docs/deploy/reverse-proxies/traefik.md",sourceDirName:"deploy/reverse-proxies",slug:"/deploy/reverse-proxies/traefik",permalink:"/deploy/reverse-proxies/traefik",draft:!1,editUrl:"https://github.com/firezone/firezone/tree/master/docs/deploy/reverse-proxies/traefik.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Traefik",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Apache",permalink:"/deploy/reverse-proxies/apache"},next:{title:"HAProxy",permalink:"/deploy/reverse-proxies/haproxy"}},l={},p=[{value:"Without SSL termination",id:"without-ssl-termination",level:2},{value:"<code>docker-compose.yml</code>",id:"docker-composeyml",level:3},{value:"<code>rules.yml</code>",id:"rulesyml",level:3},{value:"With SSL termination",id:"with-ssl-termination",level:2},{value:"SSL <code>docker-compose.yml</code>",id:"ssl-docker-composeyml",level:3},{value:"SSL <code>rules.yml</code>",id:"ssl-rulesyml",level:3}],c={toc:p};function d(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The following are examples for configuring the ",(0,o.kt)("a",{parentName:"p",href:"https://traefik.io/"},"Traefik"),"\nproxy as a reverse proxy for Firezone."),(0,o.kt)("p",null,"In these examples, we assume Traefik is deployed using Docker on the same host\nas Firezone. For this to work, you'll need to make sure Firezone's phoenix\napp is bound to port ",(0,o.kt)("inlineCode",{parentName:"p"},"13000")," on the Docker interface address and\n",(0,o.kt)("inlineCode",{parentName:"p"},"external_trusted_proxies")," is set properly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"# /etc/firezone/firezone.rb\n\n# ...\n\ndefault['firezone']['phoenix']['port'] = 13000\ndefault['firezone']['phoenix']['listen_address'] = '172.17.0.1'\ndefault['firezone']['external_trusted_proxies'] = ['172.18.0.2']\n")),(0,o.kt)("h2",{id:"without-ssl-termination"},"Without SSL termination"),(0,o.kt)("p",null,"Since Firezone requires HTTPS for the web portal, please bear in mind a\ndownstream proxy will need to terminate SSL connections in this scenario."),(0,o.kt)("p",null,"Use the following ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"rules.yml")," files to configure\nTraefik:"),(0,o.kt)("h3",{id:"docker-composeyml"},(0,o.kt)("inlineCode",{parentName:"h3"},"docker-compose.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\n\nservices:\n  reverse-proxy:\n          #network_mode: "host"\n    # The official v2 Traefik docker image\n    image: traefik:v2.8\n    # Enables the web UI and tells Traefik to listen to docker\n    command:\n    - "--providers.docker"\n    - "--providers.file.filename=rules.yml"\n    - "--entrypoints.web.address=:80"\n    - "--entrypoints.web.forwardedHeaders.insecure"\n    - "--log.level=DEBUG"\n    extra_hosts:\n    - "host.docker.internal:host-gateway"\n    ports:\n      # The HTTP port\n      - "80:80"\n    volumes:\n      # So that Traefik can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n      - "./rules.yml:/rules.yml"\n')),(0,o.kt)("h3",{id:"rulesyml"},(0,o.kt)("inlineCode",{parentName:"h3"},"rules.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'http:\n  routers:\n    test:\n      entryPoints:\n              - "web"\n      service: test\n      rule: "Host(`44.200.42.78`)"\n  services:\n    test:\n      loadBalancer:\n        servers:\n        - url: "http://host.docker.internal:13000"\n')),(0,o.kt)("p",null,"Now you should be able to start the Traefik proxy with ",(0,o.kt)("inlineCode",{parentName:"p"},"docker compose up"),"."),(0,o.kt)("h2",{id:"with-ssl-termination"},"With SSL termination"),(0,o.kt)("p",null,"This configuration uses Firezone's auto-generated self-signed certificates."),(0,o.kt)("h3",{id:"ssl-docker-composeyml"},"SSL ",(0,o.kt)("inlineCode",{parentName:"h3"},"docker-compose.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\n\nservices:\n  reverse-proxy:\n          #network_mode: "host"\n    # The official v2 Traefik docker image\n    image: traefik:v2.8\n    # Enables the web UI and tells Traefik to listen to docker\n    command:\n    - "--providers.docker"\n    - "--providers.file.filename=rules.yml"\n    - "--entrypoints.web.address=:443"\n    - "--entrypoints.web.forwardedHeaders.insecure"\n    - "--log.level=DEBUG"\n    extra_hosts:\n    - "host.docker.internal:host-gateway"\n    ports:\n      # The HTTP port\n      - "443:443"\n    volumes:\n      # So that Traefik can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n      - "./rules.yml:/rules.yml"\n      - /var/opt/firezone/ssl/ca:/ssl:ro\n')),(0,o.kt)("h3",{id:"ssl-rulesyml"},"SSL ",(0,o.kt)("inlineCode",{parentName:"h3"},"rules.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'http:\n  routers:\n    test:\n      entryPoints:\n        - "web"\n      service: test\n      rule: "Host(`44.200.42.78`)"\n      tls: {}\n  services:\n    test:\n      loadBalancer:\n        servers:\n        - url: "http://host.docker.internal:13000"\ntls:\n  stores:\n    default:\n      defaultCertificate:\n        certFile: /path/to/your/cert.crt\n        keyFile: /path/to/your/key.key\n')))}d.isMDXComponent=!0}}]);