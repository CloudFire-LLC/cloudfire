"use strict";(self.webpackChunknew_docs=self.webpackChunknew_docs||[]).push([[4291],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),f=o,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||i;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7100:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],l={title:"Traefik",sidebar_position:2},s=void 0,c={unversionedId:"deploy/reverse-proxies/traefik",id:"deploy/reverse-proxies/traefik",title:"Traefik",description:"The following are examples for configuring the Traefik",source:"@site/docs/deploy/reverse-proxies/traefik.md",sourceDirName:"deploy/reverse-proxies",slug:"/deploy/reverse-proxies/traefik",permalink:"/deploy/reverse-proxies/traefik",draft:!1,editUrl:"https://github.com/firezone/firezone/docs/deploy/reverse-proxies/traefik.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Traefik",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Apache",permalink:"/deploy/reverse-proxies/apache"},next:{title:"HAProxy",permalink:"/deploy/reverse-proxies/haproxy"}},p={},u=[{value:"Without SSL termination",id:"without-ssl-termination",level:2},{value:"<code>docker-compose.yml</code>",id:"docker-composeyml",level:3},{value:"<code>rules.yml</code>",id:"rulesyml",level:3},{value:"With SSL termination",id:"with-ssl-termination",level:2},{value:"SSL <code>docker-compose.yml</code>",id:"ssl-docker-composeyml",level:3},{value:"SSL <code>rules.yml</code>",id:"ssl-rulesyml",level:3}],d={toc:u};function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The following are examples for configuring the ",(0,i.kt)("a",{parentName:"p",href:"https://traefik.io/"},"Traefik"),"\nproxy."),(0,i.kt)("p",null,"As of right now Firezone can't be run as a container in production, although\nthis is a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/firezone/firezone/issues/260"},"planned feature"),".\nSo, these example configurations expects Firezone to be deployed on the same\nhost as the proxy."),(0,i.kt)("p",null,"In these configurations we assume ",(0,i.kt)("inlineCode",{parentName:"p"},"default['firezone']['phoenix']['port']")," to be\n",(0,i.kt)("inlineCode",{parentName:"p"},"13000"),". Furthermore, for these configuration to work we need the Firezone app\nto listen in the Docker interface so you should set:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default['firezone']['phoenix']['listen_address'] = '172.17.0.1'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default['firezone']['external_trusted_proxies'] = ['172.18.0.2']"))),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"/reference/configuration-file"},"configuration file"),"."),(0,i.kt)("h2",{id:"without-ssl-termination"},"Without SSL termination"),(0,i.kt)("p",null,"Take into account that a previous proxy will need to terminate SSL connections."),(0,i.kt)("p",null,"Set the following files"),(0,i.kt)("h3",{id:"docker-composeyml"},(0,i.kt)("inlineCode",{parentName:"h3"},"docker-compose.yml")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},'ubuntu@ip-172-31-79-208:~/traefik$ cat docker-compose.yml\nversion: \'3\'\n\nservices:\n  reverse-proxy:\n          #network_mode: "host"\n    # The official v2 Traefik docker image\n    image: traefik:v2.8\n    # Enables the web UI and tells Traefik to listen to docker\n    command:\n    - "--providers.docker"\n    - "--providers.file.filename=rules.yml"\n    - "--entrypoints.web.address=:80"\n    - "--entrypoints.web.forwardedHeaders.insecure"\n    - "--log.level=DEBUG"\n    extra_hosts:\n    - "host.docker.internal:host-gateway"\n    ports:\n      # The HTTP port\n      - "80:80"\n    volumes:\n      # So that Traefik can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n      - "./rules.yml:/rules.yml"\n')),(0,i.kt)("h3",{id:"rulesyml"},(0,i.kt)("inlineCode",{parentName:"h3"},"rules.yml")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},'ubuntu@ip-172-31-79-208:~/traefik$ cat rules.yml\nhttp:\n  routers:\n    test:\n      entryPoints:\n              - "web"\n      service: test\n      rule: "Host(`44.200.42.78`)"\n  services:\n    test:\n      loadBalancer:\n        servers:\n        - url: "http://host.docker.internal:13000"\n')),(0,i.kt)("p",null,"And then you can start the Traefik proxy with ",(0,i.kt)("inlineCode",{parentName:"p"},"docker compose up")),(0,i.kt)("h2",{id:"with-ssl-termination"},"With SSL termination"),(0,i.kt)("p",null,"This configuration use the auto-generated Firezone self-signed certs as the\ndefault certificates for SSL."),(0,i.kt)("h3",{id:"ssl-docker-composeyml"},"SSL ",(0,i.kt)("inlineCode",{parentName:"h3"},"docker-compose.yml")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},'version: \'3\'\n\nservices:\n  reverse-proxy:\n          #network_mode: "host"\n    # The official v2 Traefik docker image\n    image: traefik:v2.8\n    # Enables the web UI and tells Traefik to listen to docker\n    command:\n    - "--providers.docker"\n    - "--providers.file.filename=rules.yml"\n    - "--entrypoints.web.address=:443"\n    - "--entrypoints.web.forwardedHeaders.insecure"\n    - "--log.level=DEBUG"\n    extra_hosts:\n    - "host.docker.internal:host-gateway"\n    ports:\n      # The HTTP port\n      - "443:443"\n    volumes:\n      # So that Traefik can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n      - "./rules.yml:/rules.yml"\n      - /var/opt/firezone/ssl/ca:/ssl:ro\n')),(0,i.kt)("h3",{id:"ssl-rulesyml"},"SSL ",(0,i.kt)("inlineCode",{parentName:"h3"},"rules.yml")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},'http:\n  routers:\n    test:\n      entryPoints:\n        - "web"\n      service: test\n      rule: "Host(`44.200.42.78`)"\n      tls: {}\n  services:\n    test:\n      loadBalancer:\n        servers:\n        - url: "http://host.docker.internal:13000"\ntls:\n  stores:\n    default:\n      defaultCertificate:\n        certFile: /ssl/ip-172-31-79-208.ec2.internal.crt\n        keyFile: /ssl/ip-172-31-79-208.ec2.internal.key\n')))}f.isMDXComponent=!0}}]);