"use strict";(self.webpackChunknew_docs=self.webpackChunknew_docs||[]).push([[982],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),u=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return i.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),h=r,f=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return n?i.createElement(f,a(a({ref:t},s),{},{components:n})):i.createElement(f,a({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8081:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),a=["components"],l={layout:"default",title:"Authenticate",nav_order:3,has_children:!0,has_toc:!1,description:"This page documents all the authentication methods that Firezone supports.\n"},c=void 0,u={unversionedId:"authenticate/index",id:"authenticate/index",title:"Authenticate",description:"This page documents all the authentication methods that Firezone supports.\n",source:"@site/docs/authenticate/index.md",sourceDirName:"authenticate",slug:"/authenticate/",permalink:"/authenticate/",draft:!1,editUrl:"https://github.com/firezone/firezone/docs/authenticate/index.md",tags:[],version:"current",frontMatter:{layout:"default",title:"Authenticate",nav_order:3,has_children:!0,has_toc:!1,description:"This page documents all the authentication methods that Firezone supports.\n"},sidebar:"tutorialSidebar",previous:{title:"Supported Platforms",permalink:"/deploy/supported-platforms"},next:{title:"Azure Active Directory",permalink:"/authenticate/azuread"}},s={},p=[{value:"Integrating A Generic OIDC Provider",id:"integrating-a-generic-oidc-provider",level:2},{value:"Enforce Periodic Re-authentication",id:"enforce-periodic-re-authentication",level:2}],d={toc:p};function h(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Firezone can be configured to require authentication before users can generate\nor download device configuration files. Optionally,\n",(0,o.kt)("a",{parentName:"p",href:"#enforce-periodic-re-authentication"},"periodic re-authentication"),"\ncan also be required for users to maintain their VPN session."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/52545545/168922621-1f0f4dea-adfc-4e15-a140-a2f213676103.gif",alt:"Azure SSO"})),(0,o.kt)("p",null,"By default, Firezone uses local email/password authentication, but can also\nsupport integration with any generic OpenID Connect\n(OIDC) identity provider. This allows users to sign in to Firezone using\ntheir credentials from Okta, Google, Azure AD, or your own custom identity provider."),(0,o.kt)("h2",{id:"integrating-a-generic-oidc-provider"},"Integrating A Generic OIDC Provider"),(0,o.kt)("p",null,"The example below details the config settings required by Firezone to enable SSO\nthrough an OIDC provider. The configuration file can be found at\n",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/firezone/firezone.rb"),". To pick up changes, run ",(0,o.kt)("inlineCode",{parentName:"p"},"firezone-ctl reconfigure"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"firezone-ctl restart")," to update the application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'# This is an example using Google and Okta as an SSO identity provider.\n# Multiple OIDC configs can be added to the same Firezone instance.\n\ndefault[\'firezone\'][\'authentication\'][\'oidc\'] = {\n  google: {\n    discovery_document_uri: "https://accounts.google.com/.well-known/openid-configuration",\n    client_id: "<GOOGLE_CLIENT_ID>",\n    client_secret: "<GOOGLE_CLIENT_SECRET>",\n    redirect_uri: "https://firezone.example.com/auth/oidc/google/callback",\n    response_type: "code",\n    scope: "openid email profile",\n    label: "Google"\n  },\n  okta: {\n    discovery_document_uri: "https://<OKTA_DOMAIN>/.well-known/openid-configuration",\n    client_id: "<OKTA_CLIENT_ID>",\n    client_secret: "<OKTA_CLIENT_SECRET>",\n    redirect_uri: "https://firezone.example.com/auth/oidc/okta/callback",\n    response_type: "code",\n    scope: "openid email profile offline_access",\n    label: "Okta"\n  }\n}\n')),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"discovery_document_uri"),": This URL returns a JSON with information to\nconstruct a request to the OpenID server."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"client_id"),": The client ID of the application."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"client_secret"),": The client secret of the application."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"redirect_uri"),": Instructs OIDC provider where to redirect after authentication.\nThis should be your Firezone ",(0,o.kt)("inlineCode",{parentName:"li"},"EXTERNAL_URL + /auth/oidc/<provider_key>/callback/"),"\n(e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"https://firezone.example.com/auth/oidc/google/callback/"),")."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"response_type"),": Set to ",(0,o.kt)("inlineCode",{parentName:"li"},"code"),"."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"scope"),": ",(0,o.kt)("a",{parentName:"li",href:"https://openid.net/specs/openid-connect-basic-1_0.html#Scopes"},"OIDC scopes"),"\nto obtain from your OIDC provider. This should be set to ",(0,o.kt)("inlineCode",{parentName:"li"},"openid email profile"),"\nor ",(0,o.kt)("inlineCode",{parentName:"li"},"openid email profile offline_access")," depending on the provider."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"label"),": The button label text that shows up on your Firezone login screen.")),(0,o.kt)("p",null,"We've included instructions on how to set up Firezone with several popular\nidentity providers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../authenticate/azuread"},"AzureAD")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../authenticate/google"},"Google")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/authenticate/okta"},"Okta")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../authenticate/web-auth"},"Local email/password authentication (default)"))),(0,o.kt)("p",null,"If your identity provider is not listed above, but has a generic OIDC\nconnector, please consult their documentation to find instructions on obtaining\nthe config settings required."),(0,o.kt)("p",null,"Join our ",(0,o.kt)("a",{parentName:"p",href:"https://www.firezone.dev/slack"},"Slack")," to request additional help or\nopen a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/firezone/firezone/issues"},"Github Issue")," to request\nadditional documentation for your provider."),(0,o.kt)("h2",{id:"enforce-periodic-re-authentication"},"Enforce Periodic Re-authentication"),(0,o.kt)("p",null,"Periodic re-authentication can be enforced by changing the setting in\n",(0,o.kt)("inlineCode",{parentName:"p"},"settings/security"),". This can be used to ensure a user must sign in to Firezone\nperiodically in order to maintain their VPN session."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/52545545/160450817-26406854-285c-4977-aa69-033eee2cfa57.png",alt:"periodic-auth"}),'{:width="600"}'),(0,o.kt)("p",null,"You can set the session length to a minimum of 1 hour and maximum of 90 days.\nSetting this to Never disables this setting, allowing VPN sessions indefinitely.\nThis is the default."),(0,o.kt)("p",null,"To re-authenticate an expired VPN session, a user will need to turn off their\nVPN session and sign in to the Firezone portal (URL specified during\n",(0,o.kt)("a",{parentName:"p",href:"../deploy/prerequisites"},"deployment"),"\n)."),(0,o.kt)("p",null,"See detailed Client Instructions on how to re-authenticate your session\n",(0,o.kt)("a",{parentName:"p",href:"../user-guides/client-instructions"},"here"),"."))}h.isMDXComponent=!0}}]);