"use strict";(self.webpackChunknew_docs=self.webpackChunknew_docs||[]).push([[6444],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?i.createElement(f,a(a({ref:t},u),{},{components:n})):i.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2991:function(e,t,n){n.d(t,{Z:function(){return k}});var i=n(7294),r=n(6010),o=n(8425),a=n(9960),c=n(3919),l=n(5999),s="cardContainer_fWXF",u="cardTitle_rnsV",p="cardDescription_PWke";function d(e){var t=e.href,n=e.children;return i.createElement(a.Z,{href:t,className:(0,r.Z)("card padding--lg",s)},n)}function m(e){var t=e.href,n=e.icon,o=e.title,a=e.description;return i.createElement(d,{href:t},i.createElement("h2",{className:(0,r.Z)("text--truncate",u),title:o},n," ",o),a&&i.createElement("p",{className:(0,r.Z)("text--truncate",p),title:a},a))}function f(e){var t=e.item,n=(0,o.Wl)(t);return n?i.createElement(m,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:(0,l.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function h(e){var t,n=e.item,r=(0,c.Z)(n.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",a=(0,o.xz)(null!=(t=n.docId)?t:void 0);return i.createElement(m,{href:n.href,icon:r,title:n.label,description:null==a?void 0:a.description})}function g(e){var t=e.item;switch(t.type){case"link":return i.createElement(h,{item:t});case"category":return i.createElement(f,{item:t});default:throw new Error("unknown item type "+JSON.stringify(t))}}function k(e){var t=e.items,n=e.className;return i.createElement("section",{className:(0,r.Z)("row",n)},function(e){return e.filter((function(e){return"category"!==e.type||!!(0,o.Wl)(e)}))}(t).map((function(e,t){return i.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},i.createElement(g,{key:t,item:e}))})))}},2684:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),a=n(2991),c=n(8425),l=["components"],s={title:"Authenticate",sidebar_position:3},u=void 0,p={unversionedId:"authenticate/README",id:"authenticate/README",title:"Authenticate",description:"Firezone can be configured to require authentication before users can generate",source:"@site/docs/authenticate/README.md",sourceDirName:"authenticate",slug:"/authenticate/",permalink:"/authenticate/",draft:!1,editUrl:"https://github.com/firezone/firezone/docs/authenticate/README.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Authenticate",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"HAProxy",permalink:"/deploy/reverse-proxies/haproxy"},next:{title:"Google",permalink:"/authenticate/google"}},d={},m=[{value:"Integrating A Generic OIDC Provider",id:"integrating-a-generic-oidc-provider",level:2},{value:"Pretty URLs",id:"pretty-urls",level:3},{value:"Common Providers",id:"common-providers",level:3},{value:"Enforce Periodic Re-authentication",id:"enforce-periodic-re-authentication",level:2},{value:"Re-authentication",id:"re-authentication",level:3},{value:"VPN Connection Status",id:"vpn-connection-status",level:4}],f={toc:m};function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Firezone can be configured to require authentication before users can generate\nor download device configuration files. Optionally,\n",(0,o.kt)("a",{parentName:"p",href:"#enforce-periodic-re-authentication"},"periodic re-authentication"),"\ncan also be required for users to maintain their VPN session."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/52545545/168922621-1f0f4dea-adfc-4e15-a140-a2f213676103.gif",alt:"Azure SSO"})),(0,o.kt)("p",null,"By default, Firezone uses local email/password authentication, but can also\nsupport integration with any generic OpenID Connect\n(OIDC) identity provider. This allows users to sign in to Firezone using\ntheir credentials from Okta, Google, Azure AD, or your own custom identity provider."),(0,o.kt)("h2",{id:"integrating-a-generic-oidc-provider"},"Integrating A Generic OIDC Provider"),(0,o.kt)("p",null,"The example below details the config settings required by Firezone to enable SSO\nthrough an OIDC provider. The configuration file can be found at\n",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/firezone/firezone.rb"),". To pick up changes, run ",(0,o.kt)("inlineCode",{parentName:"p"},"firezone-ctl reconfigure"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"firezone-ctl restart")," to update the application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'# This is an example using Google and Okta as an SSO identity provider.\n# Multiple OIDC configs can be added to the same Firezone instance.\n\n# Firezone can disable a user\'s VPN if there\'s any error detected trying\n# to refresh their access_token. This is verified to work for Google, Okta, and\n# Azure SSO and is used to automatically disconnect a user\'s VPN if they\'re removed\n# from the OIDC provider. Leave this disabled if your OIDC provider\n# has issues refreshing access tokens as it could unexpectedly interrupt a\n# user\'s VPN session.\ndefault[\'firezone\'][\'authentication\'][\'disable_vpn_on_oidc_error\'] = false\n\ndefault[\'firezone\'][\'authentication\'][\'oidc\'] = {\n  google: {\n    discovery_document_uri: "https://accounts.google.com/.well-known/openid-configuration",\n    client_id: "<GOOGLE_CLIENT_ID>",\n    client_secret: "<GOOGLE_CLIENT_SECRET>",\n    redirect_uri: "https://firezone.example.com/auth/oidc/google/callback/",\n    response_type: "code",\n    scope: "openid email profile",\n    label: "Google"\n  },\n  okta: {\n    discovery_document_uri: "https://<OKTA_DOMAIN>/.well-known/openid-configuration",\n    client_id: "<OKTA_CLIENT_ID>",\n    client_secret: "<OKTA_CLIENT_SECRET>",\n    redirect_uri: "https://firezone.example.com/auth/oidc/okta/callback/",\n    response_type: "code",\n    scope: "openid email profile offline_access",\n    label: "Okta"\n  }\n}\n')),(0,o.kt)("p",null,"The following config settings are required for the integration:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"discovery_document_uri"),": The\n",(0,o.kt)("a",{parentName:"li",href:"https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig"},"OpenID Connect provider configuration URI"),"\nwhich returns a JSON document used to construct subsequent requests to this\nOIDC provider."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"client_id"),": The client ID of the application."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"client_secret"),": The client secret of the application."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"redirect_uri"),": Instructs OIDC provider where to redirect after authentication.\nThis should be your Firezone ",(0,o.kt)("inlineCode",{parentName:"li"},"EXTERNAL_URL + /auth/oidc/<provider_key>/callback/"),"\n(e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"https://firezone.example.com/auth/oidc/google/callback/"),")."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"response_type"),": Set to ",(0,o.kt)("inlineCode",{parentName:"li"},"code"),"."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"scope"),": ",(0,o.kt)("a",{parentName:"li",href:"https://openid.net/specs/openid-connect-basic-1_0.html#Scopes"},"OIDC scopes"),"\nto obtain from your OIDC provider. This should be set to ",(0,o.kt)("inlineCode",{parentName:"li"},"openid email profile"),"\nor ",(0,o.kt)("inlineCode",{parentName:"li"},"openid email profile offline_access")," depending on the provider."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"label"),": The button label text that shows up on your Firezone login screen.")),(0,o.kt)("h3",{id:"pretty-urls"},"Pretty URLs"),(0,o.kt)("p",null,"For each OIDC provider a corresponding pretty URL is created for redirecting to\nthe configured provider's sign-in URL. For the example OIDC config above, the\nURLs are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"https://firezone.example.com/auth/oidc/google")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"https://firezone.example.com/auth/oidc/okta"))),(0,o.kt)("h3",{id:"common-providers"},"Common Providers"),(0,o.kt)("p",null,"We've included instructions on how to set up Firezone with several popular\nidentity providers:"),(0,o.kt)(a.Z,{items:(0,c.jA)().items,mdxType:"DocCardList"}),(0,o.kt)("p",null,"If your identity provider is not listed above, but has a generic OIDC\nconnector, please consult their documentation to find instructions on obtaining\nthe config settings required."),(0,o.kt)("p",null,"Open a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/firezone/firezone/issues"},"Github Issue"),"\nto request documentation\nor submit a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/firezone/firezone/tree/master/docs/docs/authenticate/index.md"},"pull request"),"\nto add documentation for your provider.\nIf you require assistance in setting up your OIDC provider, please\njoin the ",(0,o.kt)("a",{parentName:"p",href:"https://www.firezone.dev/slack"},"Firezone Slack group"),"."),(0,o.kt)("h2",{id:"enforce-periodic-re-authentication"},"Enforce Periodic Re-authentication"),(0,o.kt)("p",null,"Periodic re-authentication can be enforced by changing the setting in\n",(0,o.kt)("inlineCode",{parentName:"p"},"settings/security"),". This can be used to ensure a user must sign in to Firezone\nperiodically in order to maintain their VPN session."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/52545545/160450817-26406854-285c-4977-aa69-033eee2cfa57.png",alt:"periodic-auth"})),(0,o.kt)("p",null,"You can set the session length to a minimum of 1 hour and maximum of 90 days.\nSetting this to Never disables this setting, allowing VPN sessions indefinitely.\nThis is the default."),(0,o.kt)("h3",{id:"re-authentication"},"Re-authentication"),(0,o.kt)("p",null,"To re-authenticate an expired VPN session, a user will need to turn off their\nVPN session and sign in to the Firezone portal (URL specified during\n",(0,o.kt)("a",{parentName:"p",href:"../deploy/prerequisites"},"deployment"),"\n)."),(0,o.kt)("p",null,"See detailed Client Instructions on how to re-authenticate your session\n",(0,o.kt)("a",{parentName:"p",href:"../user-guides/client-instructions"},"here"),"."),(0,o.kt)("h4",{id:"vpn-connection-status"},"VPN Connection Status"),(0,o.kt)("p",null,"A user's connection status is shown on the Users page under the table column\n",(0,o.kt)("inlineCode",{parentName:"p"},"VPN Connection"),". The connection statuses are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ENABLED - The connection is enabled."),(0,o.kt)("li",{parentName:"ul"},"DISABLED - The connection is disabled by an administrator or OIDC refresh failure."),(0,o.kt)("li",{parentName:"ul"},"EXPIRED - The connection is disabled due to authentication expiration or a user\nhas not signed in for the first time.")))}h.isMDXComponent=!0}}]);