# This Dockerfile builds a development image to use for local development work

FROM firezone/elixir:1.14.3-otp-25.2.1

# Install dev dependencies / convenience tools
RUN apk add \
    yarn \
    build-base \
    git \
    python3 \
    curl \
    net-tools \
    iproute2 \
    nftables \
    inotify-tools \
    ca-certificates \
    sudo \
    nodejs

WORKDIR /var/app

ARG GIT_SHA=DEV
ARG MIX_ENV=dev
ARG DATABASE_HOST
ARG DATABASE_PORT
ARG DATABASE_NAME
ARG DATABASE_USER
ARG DATABASE_PASSWORD

ENV GIT_SHA=$GIT_SHA
ENV MIX_ENV=$MIX_ENV
ENV DATABASE_HOST=$DATABASE_HOST
ENV DATABASE_PORT=$DATABASE_PORT
ENV DATABASE_NAME=$DATABASE_NAME
ENV DATABASE_USER=$DATABASE_USER
ENV DATABASE_PASSWORD=$DATABASE_PASSWORD

RUN mix local.hex --force && mix local.rebar --force

COPY apps/domain/mix.exs /var/app/apps/web/mix.exs
COPY apps/web/mix.exs /var/app/apps/web/mix.exs
COPY apps/api/mix.exs /var/app/apps/api/mix.exs
COPY mix.exs /var/app/mix.exs
COPY mix.lock /var/app/mix.lock
RUN mix do deps.get, deps.compile, compile

# Copy more granular, dependency management files first to prevent
# busting the Docker build cache unnecessarily
COPY apps/web/assets/package.json /var/app/apps/web/assets/package.json
COPY apps/web/assets/yarn.lock /var/app/apps/web/assets/yarn.lock
RUN cd apps/web/assets && mix do assets.setup, assets.deploy

COPY config /var/app/config
COPY apps /var/app/apps
RUN cd apps/web && mix phx.gen.cert

COPY scripts/dev_start.sh /var/app/dev_start.sh

EXPOSE 51820/udp

CMD ["/var/app/dev_start.sh"]
